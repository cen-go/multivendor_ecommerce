generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(uuid())
  name    String
  email   String @unique
  picture String @db.Text
  role    Role   @default(USER)

  stores      Store[]
  following   Store[]           @relation("UserFollowingStore")
  reviews     Review[]
  cart        Cart?
  wishlists   Wishlist[]
  addresses   ShippingAddress[]
  orders      Order[]
  payments    PaymentDetails[]
  couponsUsed Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(uuid())
  name     String  @unique
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[]
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id         String  @id @default(uuid())
  categoryId String
  name       String  @unique
  image      String
  url        String  @unique
  featured   Boolean @default(false)

  products Product[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id            String      @id @default(uuid())
  name          String
  description   String      @db.Text
  email         String      @unique
  phone         String
  url           String      @unique
  logo          String
  cover         String
  status        StoreStatus @default(PENDING)
  averageRating Float       @default(0)
  featured      Boolean     @default(false)
  returnPolicy  String      @default("Return in 30 days")

  defaultShippingService              String @default("International Delivery")
  defaultShippingFeePerItem           Int    @default(0)
  defaultShippingFeePerAdditionalItem Int    @default(0)
  defaultShippingFeePerKg             Int    @default(0)
  defaultShippingFeeFixed             Int    @default(0)
  defaultDeliveryTimeMin              Int    @default(7)
  defaultDeliveryTimeMax              Int    @default(31)

  products      Product[]
  shippingRates ShippingRate[]
  followers     User[]         @relation("UserFollowingStore")
  cartItems     CartItem[]
  orderGroups   OrderGroup[]
  coupons       Coupon[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  WEIGHT
  FIXED
}

model Product {
  id                String            @id @default(uuid())
  name              String
  description       String            @db.LongText
  slug              String            @unique
  brand             String
  rating            Float             @default(0)
  numReviews        Int               @default(0)
  sales             Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)

  variants                    ProductVariant[]
  specs                       Spec[]
  questions                   Question[]
  reviews                     Review[]
  wishlists                   Wishlist[]
  freeShipping                FreeShipping?
  freeShippingForAllCountries Boolean          @default(false)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subcategoryId String
  subcategory   SubCategory @relation(fields: [subcategoryId], references: [id])

  offerTagId String?
  offerTag   OfferTag? @relation(fields: [offerTagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id                 String   @id @default(uuid())
  variantName        String
  variantDescription String?  @db.LongText
  variantImage       String
  slug               String   @unique
  isSale             Boolean  @default(false)
  saleEndDate        String?
  keywords           String
  sku                String
  sales              Int      @default(0)
  weight             Decimal? @db.Decimal(8, 3)

  sizes     Size[]
  images    ProductVariantImage[]
  colors    Color[]
  specs     Spec[]
  wishlists Wishlist[]

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Int
  discount Int    @default(0)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  wishlists        Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model Spec {
  id    String @id @default(uuid())
  name  String
  value String

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id       String @id @default(uuid())
  question String
  answer   String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  shippingRates         ShippingRate[]
  freeShippingCountries FreeShippingCountry[]
  shippingAddresses     ShippingAddress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingRate {
  id String @id @default(uuid())

  returnPolicy                 String
  shippingService              String
  shippingFeePerItem           Int
  shippingFeePerAdditionalItem Int
  shippingFeePerKg             Int
  shippingFeeFixed             Int
  deliveryTimeMin              Int
  deliveryTimeMax              Int

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, countryId])
  @@index([countryId])
  @@index([storeId])
}

model FreeShipping {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  eligibleCountries FreeShippingCountry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FreeShippingCountry {
  id String @id @default(uuid())

  freeShippingId String
  freeShipping   FreeShipping @relation(fields: [freeShippingId], references: [id], onDelete: Cascade)

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([freeShippingId])
  @@index([countryId])
}

model Review {
  id      String @id @default(uuid())
  variant String
  review  String
  rating  Float
  color   String
  size    String
  likes   Int    @default(0)

  images ReviewImage[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model ReviewImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Cart {
  id           String  @id @default(uuid())
  userId       String  @unique
  shippingFees Int     @default(0)
  subtotal     Int
  total        Int
  couponId     String?
  coupon       Coupon? @relation(fields: [couponId], references: [id])

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

model CartItem {
  id          String @id @default(uuid())
  cartId      String
  productId   String
  variantId   String
  sizeId      String
  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  price       Int
  shippingFee Int    @default(0)
  totalPrice  Int
  storeId     String

  cart  Cart  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([storeId])
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String
  productId String
  variantId String
  sizeId    String?

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  size    Size?          @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@index([sizeId])
}

model ShippingAddress {
  id        String  @id @default(uuid())
  userId    String
  countryId String
  title     String
  firstName String
  lastName  String
  phone     String
  address1  String
  address2  String
  city      String
  zip_code  String
  default   Boolean @default(false)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([countryId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  ON_DELIVERY
  DELIVERED
  CANCELLED
  FAILED
  REFUNDED
  RETURNED
  PARTIALLY_SHIPPED
  ON_HOLD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  DECLINED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  CHARGEBACK
}

model Order {
  id                String        @id @default(uuid())
  shippingFees      Int
  subtotal          Int
  total             Int
  orderStatus       OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  shippingAddressId String
  userId            String

  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  orderGroups    OrderGroup[]
  paymentDetails PaymentDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shippingAddressId])
  @@index([userId])
}

model OrderGroup {
  id              String      @id @default(uuid())
  status          OrderStatus @default(PENDING)
  shippingService String
  deliveryTimeMin Int
  deliveryTimeMax Int
  shippingFees    Int
  subtotal        Int
  total           Int
  orderId         String
  storeId         String
  couponId        String?

  order  Order   @relation(fields: [orderId], references: [id])
  store  Store   @relation(fields: [storeId], references: [id])
  coupon Coupon? @relation(fields: [couponId], references: [id])

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([storeId])
  @@index([couponId])
}

enum ProductStatus {
  /// Product has been added to the order but no action taken yet
  PENDING
  /// Product is being prepared (picked, packed, or manufactured)
  PROCESSING
  /// Product is packed and ready for shipment
  READY_FOR_SHIPMENT
  /// Product has been shipped
  SHIPPED
  /// Product has been delivered to the customer
  DELIVERED
  /// Product order has been canceled
  CANCELLED
  /// Product has been returned by the customer
  RETURNED
  /// Product cost has been refunded
  REFUNDED
  /// Delivery attempt failed, product may return to warehouse
  FAILED_DELIVERY
  /// Product is on hold (e.g., stock issues, verification required)
  ON_HOLD
  /// Product is delayed due to stock unavailability
  BACK_ORDERED
  /// Some units of the product were shipped, but the order is not yet complete
  PARTIALLY_SHIPPED
  /// Customer requested an exchange for the product
  EXCHANGE_REQUESTED
  /// Product is awaiting customer pickup (for pickup orders)
  AWAITING_PICKUP
}

model OrderItem {
  id String @id @default(uuid())

  productId   String
  variantId   String
  sizeId      String
  productSlug String
  variantSlug String
  sku         String

  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  shippingFee Int    @default(0)
  price       Int
  totalPrice  Int

  status ProductStatus @default(PENDING)

  orderGroupId String

  orderGroup OrderGroup @relation(fields: [orderGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderGroupId])
}

model PaymentDetails {
  id              String @id @default(uuid())
  paymentIntentId String
  paymentMethod   String
  status          String
  amount          Int
  currency        String

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Coupon {
  id        String @id @default(uuid())
  code      String @unique
  startDate String
  endDate   String
  discount  Int
  storeId   String

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  carts  Cart[]
  orders OrderGroup[]
  users  User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
