generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(uuid())
  name    String
  email   String @unique
  picture String @db.Text
  role    Role   @default(USER)

  stores Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(uuid())
  name     String  @unique
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[]
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id         String  @id @default(uuid())
  categoryId String
  name       String  @unique
  image      String
  url        String  @unique
  featured   Boolean @default(false)

  products Product[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                  String      @id @default(uuid())
  name                                String
  description                         String      @db.Text
  email                               String      @unique
  phone                               String
  url                                 String      @unique
  logo                                String
  cover                               String
  status                              StoreStatus @default(PENDING)
  averageRating                       Float       @default(0)
  featured                            Boolean     @default(false)
  returnPolicy                        String      @default("Return in 30 days")
  defaultShippingService              String      @default("International Delivery")
  defaultShippingFeePerItem           Int         @default(0)
  defaultShippingFeePerAdditionalItem Int         @default(0)
  defaultShippingFeePerKg             Int         @default(0)
  defaultShippingFeeFixed             Int         @default(0)
  defaultDeliveryTimeMin              Int         @default(7)
  defaultDeliveryTimeMax              Int         @default(31)

  products      Product[]
  shippingRates ShippingRate[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String @db.LongText
  slug        String @unique
  brand       String
  rating      Float  @default(0)
  sales       Int    @default(0)

  variants  ProductVariant[]
  specs     Spec[]
  questions Question[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subcategoryId String
  subcategory   SubCategory @relation(fields: [subcategoryId], references: [id])

  offerTagId String?
  offerTag   OfferTag? @relation(fields: [offerTagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id                 String  @id @default(uuid())
  variantName        String
  variantDescription String? @db.LongText
  variantImage       String
  slug               String  @unique
  isSale             Boolean @default(false)
  saleEndDate        String?
  keywords           String
  sku                String
  sales              Int     @default(0)

  sizes  Size[]
  images ProductVariantImage[]
  colors Color[]
  specs  Spec[]

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Int
  discount Int    @default(0)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model Spec {
  id    String @id @default(uuid())
  name  String
  value String

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id       String @id @default(uuid())
  question String
  answer   String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  shippingRates ShippingRate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingRate {
  id String @id @default(uuid())

  returnPolicy                 String
  shippingService              String
  shippingFeePerItem           Int
  shippingFeePerAdditionalItem Int
  shippingFeePerKg             Int
  shippingFeeFixed             Int
  deliveryTimeMin              Int
  deliveryTimeMax              Int

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, countryId])
  @@index([countryId])
  @@index([storeId])
}
